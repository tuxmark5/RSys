#!/usr/bin/python2.7
# -*- coding: utf-8 -*-


""" Scenarijus defektų fiksavimui.

+   ``dreg komponentas tipas įterptas pašalintas komentaras``

    Sukuria žymę, kad aptiktas defektas ir jis pradėtas taisyti. Apie
    defektą išsaugo:

    +   laiką;
    +   radėją;
    +   komponentą;
    +   id;
    +   tipą;
    +   įterpimo ciklą ir fazę;
    +   pašalinimo ciklą ir fazę;
    +   aprašymą.

+   dreg-a id trukmė [aprašymas]

    Užregistruoja defektą, pašalina aptikto defekto žymę. Jei pateiktas
    aprašymas, jo tekstą prideda prie jau turimo aprašymo.

"""


from __future__ import unicode_literals

import argparse
import os
import pickle
import datetime


RSYS_DIR = os.path.join(
        os.path.abspath(
            os.path.join(os.path.dirname(__file__), '..')))
PICKLE_PATH = os.path.join(RSYS_DIR, '.defects.pickle')
CSV_PATH = os.path.join(RSYS_DIR, '.defects.csv')


def to_unicode(string):
    """ Converts string to unicode.
    """

    if isinstance(string, str):
        return string.decode('utf-8')
    else:
        return unicode(string)


def save_defect(args):
    """ Išsaugo defektą SSV (Smile sperated values) faile.
    """

    with open(PICKLE_PATH, 'rb') as fp:
        last_id = pickle.load(fp)
        defects = pickle.load(fp)

    defect = defects[args.defect_id]
    del defects[args.defect_id]

    defect['Išsaugojimo laikas'] = datetime.datetime.now().strftime(
            '%Y-%m-%d %H:%M:%S')
    defect['Trukmė'] = args.duration
    defect['Aprašymo papildymas'] = args.description

    with open(CSV_PATH, 'ab') as fp:
        data = ('☹☺☹'.join([
            unicode(defect[key]) for key in sorted(defect)]))
        fp.write((u'☹{0}☹\n'.format(data)).encode(u'utf-8'))

    print 'Išsaugotas defektas. ID:', defect['id']
    with open(PICKLE_PATH, 'wb') as fp:
        pickle.dump(last_id, fp)
        pickle.dump(defects, fp)


def main(argv=None):
    """ Main entry point.
    """

    if argv is None:
        import sys
        argv = sys.argv[1:]

    parser = argparse.ArgumentParser(
            description='Išsaugo defektą.')
    parser.add_argument(
            'defect_id', type=int, help='Defekto id.')
    parser.add_argument(
            'duration', type=int, help='Defekto šalinimo trukmė minutėmis.')
    parser.add_argument(
            'description',  type=to_unicode,
            help='Defekto aprašymo papildymas.',
            default='', nargs='?')

    args = parser.parse_args(argv)

    save_defect(args)


if __name__ == '__main__':
    main()
